---
- name: Setup Development Environment
  hosts: localhost
  become: yes
  vars:
    tools_to_install:
      - basics
      - asdf
      - zsh
      #- i3
      - rofi
      - kitty
      - tmux
      - tmuxifier
      #- neovim
      - taskwarrior
      - dotfiles

  tasks:
    - name: Install basic tools
      apt:
        name:
          - net-tools
          - build-essential
          - wget
          - zip
          - unzip
          - fzf
          - curl
          - xclip
          - ripgrep
          - python3
          - python3-pip
          - tree
          - jq
          - at
        state: present
      when: "'basics' in tools_to_install"

    - name: Install PyVim
      pip:
        name: pyvim
        executable: pip3
      when: "'basics' in tools_to_install"

    - name: Install ASDF
      git:
        repo: "https://github.com/asdf-vm/asdf.git"
        dest: "{{ ansible_env.HOME }}/.asdf"
        version: "v0.11.3"
        clone: yes
      when: "'asdf' in tools_to_install"

    - name: Ensure ASDF is in PATH
      lineinfile:
        path: ~/.profile
        line: 'export PATH="$HOME/.asdf/bin:$HOME/.asdf/shims:$PATH"'
        state: present
      when: "'asdf' in tools_to_install"

    - name: Install Zsh
      apt:
        name: zsh
        state: present
      when: "'zsh' in tools_to_install"

    - name: Set Zsh as default shell
      command: chsh -s /bin/zsh
      when: "'zsh' in tools_to_install"
      args:
        creates: /bin/zsh

    - name: Check if Oh My Zsh is already installed
      stat:
        path: "{{ lookup('env', 'HOME') }}/.oh-my-zsh"
      register: zsh_install_check
      when: "'zsh' in tools_to_install"

    - name: Remove existing Oh My Zsh directory if exists
      file:
        path: "{{ lookup('env', 'HOME') }}/.oh-my-zsh"
        state: absent
      when: "'zsh' in tools_to_install and zsh_install_check.stat.exists"

    - name: Install Oh My Zsh
      shell: |
        export RUNZSH=no
        export ZSH="{{ lookup('env', 'HOME') }}/.oh-my-zsh"
        curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh | sh
      when: "'zsh' in tools_to_install"

    - name: Install i3
      become: yes
      block:
        - name: Download i3 keyring
          get_url:
            url: https://debian.sur5r.net/i3/pool/main/s/sur5r-keyring/sur5r-keyring_2024.03.04_all.deb
            dest: /tmp/keyring.deb
            checksum: "sha256:f9bb4340b5ce0ded29b7e014ee9ce788006e9bbfe31e96c09b2118ab91fca734"
          register: keyring_download

        - name: Install i3 keyring
          apt:
            deb: /tmp/keyring.deb
            state: present
          when: keyring_download.changed

        - name: Add i3 repository
          lineinfile:
            path: /etc/apt/sources.list.d/sur5r-i3.list
            line: "deb http://debian.sur5r.net/i3/ {{ ansible_lsb.codename }} universe"
            create: yes

        - name: Update apt package index
          apt:
            update_cache: yes

        - name: Install i3
          apt:
            name: i3
            state: present

        - name: Remove i3 keyring file
          file:
            path: /tmp/keyring.deb
            state: absent
      when: "'i3' in tools_to_install"

    - name: Install Rofi
      apt:
        name: rofi
        state: present
      when: "'rofi' in tools_to_install"

    - name: Install Kitty terminal
      apt:
        name: kitty
        state: present
      when: "'kitty' in tools_to_install"

    - name: Install Tmux
      apt:
        name: tmux
        state: present
      when: "'tmux' in tools_to_install"

    - name: Install Tmuxifier
      git:
        repo: "https://github.com/jimeh/tmuxifier.git"
        dest: /usr/local/bin/tmuxifier
        version: main
        update: no
      when: "'tmuxifier' in tools_to_install"

    - name: Install Neovim
      block:
        - name: Download Neovim
          get_url:
            url: https://github.com/neovim/neovim/releases/latest/download/nvim-linux64.tar.gz
            dest: /tmp/nvim-linux64.tar.gz

        - name: Extract Neovim
          unarchive:
            src: /tmp/nvim-linux64.tar.gz
            dest: /opt
            remote_src: yes

        - name: Clean up Neovim archive
          file:
            path: /tmp/nvim-linux64.tar.gz
            state: absent
      when: "'neovim' in tools_to_install"

    - name: Install Taskwarrior
      apt:
        name:
          - taskwarrior
        state: present
      when: "'taskwarrior' in tools_to_install"

    - name: Install Docker
      block:
        - name: Install necessary packages for Docker repository
          apt:
            name:
              - apt-transport-https
              - ca-certificates
              - curl
              - software-properties-common
            state: present

        - name: Add Docker GPG key
          apt_key:
            url: https://download.docker.com/linux/ubuntu/gpg
            state: present

        - name: Add Docker repository
          apt_repository:
            repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu {{ ansible_lsb.codename }} stable
            state: present

        - name: Update package index after adding Docker repository
          apt:
            update_cache: yes

        - name: Install Docker
          apt:
            name: docker-ce
            state: present

        - name: Start and enable Docker service
          systemd:
            name: docker
            state: started
            enabled: yes

        - name: Determine the latest version of Docker Compose
          command: >
            curl -s https://api.github.com/repos/docker/compose/releases/latest
          register: latest_release

        - name: Set Docker Compose version
          set_fact:
            docker_compose_version: "{{ latest_release.stdout | from_json | json_query('tag_name') }}"

        - name: Download Docker Compose binary
          get_url:
            url: "https://github.com/docker/compose/releases/download/{{ docker_compose_version }}/docker-compose-{{ ansible_facts['os_family'] | lower }}-{{ ansible_facts['processor_cores'] | first }}"
            dest: /usr/local/bin/docker-compose
            mode: "u+x"
      when: "'docker' in tools_to_install"

    - name: Ensure dotfile directories exist
      file:
        path: "{{ lookup('env', 'HOME') }}/{{ item.dest | dirname }}"
        state: directory
        mode: "0755"
      loop:
        - { dest: ".bashrc" }
        - { dest: ".zshrc" }
        - { dest: ".oh-my-zsh/themes/cyberpunk.zsh-theme" }
        - { dest: ".config/i3" }
        - { dest: ".config/kitty/kitty.conf" }
        - { dest: ".config/rofi/config.rasi" }
        - { dest: ".config/tmux/tmux.conf" }
        - { dest: ".tmux-layouts" }
        - { dest: ".taskrc" }
        - { dest: ".config/nvim" }
        - { dest: ".config/shell" }
      when: "'dotfiles' in tools_to_install"

    - name: Symlink dotfiles
      ansible.builtin.file:
        src: "{{ playbook_dir }}/../dotfiles/{{ item.src }}"
        dest: "{{ lookup('env', 'HOME') }}/{{ item.dest }}"
        state: link
        force: yes # Overwrite existing files or directories
      loop:
        - { src: "bash/.bashrc", dest: ".bashrc" }
        - { src: "zsh/.zshrc", dest: ".zshrc" }
        - {
            src: "zsh/cyberpunk.zsh-theme",
            dest: ".oh-my-zsh/themes/cyberpunk.zsh-theme",
          }
        - { src: "i3", dest: ".config/i3" }
        - { src: "kitty/kitty.conf", dest: ".config/kitty/kitty.conf" }
        - { src: "rofi/config.rasi", dest: ".config/rofi/config.rasi" }
        - { src: "tmux/tmux.conf", dest: ".config/tmux/tmux.conf" }
        - { src: "tmux/layouts", dest: ".tmux-layouts" }
        - { src: "timewarrior/.taskrc", dest: ".taskrc" }
        - { src: "nvim", dest: ".config/nvim" }
        - { src: "shell", dest: ".config/shell" }
      when: "'dotfiles' in tools_to_install"
