#!/bin/bash

SCRIPT="dottools"
VERSION="1.0.0"
INCLUDE_FILE=".include"
OUTPUT_DIR="dotfiles"

declare -A unique_args
declare -A file_entries

show_header() {
  echo -e "                                                              \n @@@@@@@@  @@@@@@@  @@@@@@@        @@@    @@@@@@   @@@@@@@@  \n@@@@@@@@@  @@@@@@@  @@@@@@@@      @@@@   @@@@@@@@  @@@@@@@@  \n!@@          @@!    @@!  @@@     @@!@!   @@!  @@@       @@!  \n!@!          !@!    !@!  @!@    !@!!@!   !@!  @!@      !@!   \n!@! @!@!@    @!!    @!@!!@!    @!! @!!    !@!!@!      @!!    \n!!! !!@!!    !!!    !!@!@!    !!!  !@!    !!@!!!     !!!     \n:!!   !!:    !!:    !!: :!!   :!!:!:!!:  !!:  !!!   !!:      \n:!:   !::    :!:    :!:  !:!  !:::!!:::  :!:  !:!  :!:       \n ::: ::::     ::    ::   :::       :::   ::::: ::   ::       \n :: :: :      :      :   : :       :::    : :  :   : :       \n                                                              "
}

show_version() {
  echo -e "--------------------------------------------------------\n                                                  v$VERSION\n--------------------------------------------------------"
}

show_help() {
  echo "Usage: $SCRIPT [OPTIONS]"
  echo
  echo "Description:"
  echo "  $SCRIPT is a Bash script to set up a development environment by installing necessary tools"
  echo "  and managing dotfiles."
  echo
  echo "Options:"
  echo "  -h, --help            Display this help message and exit."
  echo "  -s, --setup           Install and configure the base development environment."
  echo "  -i, --install         Install all required dependencies (i3, Rofi, Polybar, Kitty, Tmux)."
  echo "  -g, --get             Retrieve dotfiles from the source paths specified in the .include file."
  echo "  -p, --put             Deploy dotfiles to the destination paths specified in the .include file."
  echo
  echo "Examples:"
  echo "  sudo ./$SCRIPT --setup     Install and configure the base environment."
  echo "  ./$SCRIPT --get            Retrieve dotfiles and store them in the output directory."
  echo
  echo "Note:"
  echo "  You may need to run this script with elevated privileges (sudo) to install certain packages."
  echo
  exit 0
}

install_i3() {
  echo "# i3 --------------------------- #"
  
  /usr/lib/apt/apt-helper download-file https://debian.sur5r.net/i3/pool/main/s/sur5r-keyring/sur5r-keyring_2024.03.04_all.deb keyring.deb SHA256:f9bb4340b5ce0ded29b7e014ee9ce788006e9bbfe31e96c09b2118ab91fca734
  if [ $? -ne 0 ]; then
	  echo "Error: Failed to download keyring file."
	  exit 1
  fi

  sudo apt install -y ./keyring.deb
  if [ $? -ne 0 ]; then
	echo "Error: Failed to install keyring package."
	rm -f keyring.deb
	exit 1
  fi

  echo "deb http://debian.sur5r.net/i3/ $(grep '^DISTRIB_CODENAME=' /etc/lsb-release | cut -f2 -d=) universe" | sudo tee /etc/apt/sources.list.d/sur5r-i3.list

  sudo apt update
  if [ $? -ne 0 ]; then
	echo "Error: Failed to update the package index."
	rm -f keyring.deb
	exit 1
  fi

  sudo apt install -y i3
  if [ $? -ne 0 ]; then
	echo "Error: Failed to install i3."
	rm -f keyring.deb
	exit 1
  fi

  rm -f keyring.deb
  echo "# i3 - Installation complete, and temporary files have been removed."

  echo
}

install_rofi() {
  echo "# Rofi ------------------------- #"

  sudo apt install -y rofi
  if [ $? -ne 0 ]; then
	echo "Error: Failed to install Rofi."
	exit 1
  fi
  echo "# Rofi - Installation complete."

  echo
}

install_polybar() {
  echo "# Polybar ---------------------- #"

  sudo apt install -y polybar
  if [ $? -ne 0 ]; then
	echo "Error: Failed to install Polybar."
	exit 1
  fi
  echo "# Polybar - Installation complete."

  echo
}

install_kitty() {
  echo "# Kitty ------------------------ #"

  sudo apt install -y kitty
  if [ $? -ne 0 ]; then
	echo "Error: Failed to install Kitty."
	exit 1
  fi
  echo "# Kitty - Installation complete."

  echo
}

install_tmux() {
  echo "# Tmux ------------------------- #"

  sudo apt install -y tmux
  if [ $? -ne 0 ]; then
	echo "Error: Failed to install Tmux."
	exit 1
  fi
  echo "source-file ~/.config/tmux/tmux.conf" > ~/.tmux.conf

  echo "# Tmux - Installation complete."

  echo
}
install_dependencies() {
  echo "Installing dependencies:"
  install_i3
  install_rofi
  install_polybar
  install_kitty 
  install_tmux
}

setup_environment() {
  echo "= Setting up environment ="
  install_dependencies
  put_dotfiles
}

fill_unique_args() {
  for arg in "$@"; do
	unique_args["$arg"]=1
  done
}

fill_file_entries() {
  if [ ! -e "${INCLUDE_FILE}" ]; then
	  echo "Warning: No $INCLUDE_FILE found."
	  return 1
  fi

  while IFS=$'\t ' read -r name path; do
	  file_entries["$name"]="$path"
  done < "$INCLUDE_FILE"
}

get_dotfiles() {
	echo "Getting dotfiles"
	for clave in "${!file_entries[@]}"; do
		from_path="${file_entries[$clave]}"
		from_path_expanded="${from_path//\~/$HOME}"
		to_path="${OUTPUT_DIR}/${clave}"

		mkdir -p "${to_path}"

		if [ -f "${from_path_expanded}" ]; then
			cp "${from_path_expanded}" "${to_path}"
			if [ $? -eq 0 ]; then 
				echo "- Copied: ${clave}  <-  ${from_path_expanded}"
			else
				echo "- Error: Not copied: ${clave}  <-  ${from_path_expanded}"
			fi
		elif [[ "${from_path_expanded}" == *'*' ]]; then
			shopt -s dotglob
			files=($from_path_expanded)
			shopt -u dotglob
			
			for file in "${files[@]}"; do
				cp -r "${file}" "${to_path}"
				if [ $? -eq 0 ]; then 
					echo "- Copied: ${clave}  <-  ${file}"
				else
					echo "- Error: Not copied: ${clave}  <-  ${file}"
				fi
			done


		else
			echo "Warning: ${from_path} invalid."
		fi
	done
	echo
}

put_dotfiles() {
	echo "Putting dotfiles"
	for clave in "${!file_entries[@]}"; do
		from_path="${OUTPUT_DIR}/${clave}"
		to_path="${file_entries[$clave]}"
		to_path_expanded="${to_path//\~/$HOME}"
		
		mkdir -p $(dirname "$to_path_expanded")

		shopt -s dotglob
		files=($from_path)
		shopt -u dotglob

		for file in "${files[@]}"; do
			cp -r "${file}" "$(dirname $(dirname $to_path_expanded))"

			if [ $? -eq 0 ]; then 
				echo "- Copied: ${clave}  ->  ${to_path_expanded}"
			else
				echo "- Error: Not copied: ${clave}  ->  ${to_path_expanded}"
			fi
		done

	done
	echo
}

####################
####################

if [ "$#" -eq 0 ]; then
	show_help
	exit 1
fi

show_header
echo
show_version
echo
echo
	
fill_unique_args "$@"
fill_file_entries

for arg in "${!unique_args[@]}"; do
	case "$arg" in
		-h|--help)
			show_help
			;;
		-s|--setup)
			setup_environment
			;;
		-i|--install)
			install_dependencies
			;;
		-g|--get)
			get_dotfiles
			;;
		-p|--put)
			put_dotfiles
			;;
	esac
done

