---
- name: Setup Development Environment
  hosts: localhost
  become: yes
  vars:
    tools_to_install:
      - basics
      - asdf
      - asdf_plugins
      - zsh
      - i3
      - rofi
      - polybar
      - kitty
      - tmux
      - neovim
      - timewarrior
      - dotfiles

  tasks:
    - name: Install basic tools
      apt:
        name:
          - net-tools
          - build-essential
          - wget
          - zip
          - unzip
          - fzf
          - curl
          - xclip
          - ripgrep
          - python3
          - python3-pip
          - tree
        state: present
      when: "'basics' in tools_to_install"

    - name: Install PyVim
      pip:
        name: pyvim
        executable: pip3
      when: "'basics' in tools_to_install"

    - name: Install ASDF
      git:
        repo: 'https://github.com/asdf-vm/asdf.git'
        dest: '~/.asdf'
        version: 'v0.11.3'
        clone: yes
      when: "'asdf' in tools_to_install"

    - name: Install ASDF plugins
      block:
        - name: Add ASDF Node.js plugin
          command: asdf plugin-add nodejs https://github.com/asdf-vm/asdf-nodejs.git
          args:
            creates: ~/.asdf/plugins/nodejs

        - name: Install Node.js with ASDF
          command: asdf install nodejs 22.8.0
          args:
            creates: ~/.asdf/installs/nodejs/22.8.0

        - name: Set Node.js version globally
          command: asdf global nodejs 22.8.0

        - name: Add ASDF Java plugin
          command: asdf plugin-add java
          args:
            creates: ~/.asdf/plugins/java

        - name: Install Java 11 with ASDF
          command: asdf install java openjdk-11.0.2
          args:
            creates: ~/.asdf/installs/java/openjdk-11.0.2

        - name: Set Java version globally
          command: asdf global java openjdk-11.0.2
      when: "'asdf_plugins' in tools_to_install"

    - name: Install Zsh
      apt:
        name: zsh
        state: present
      when: "'zsh' in tools_to_install"

    - name: Set Zsh as default shell
      command: chsh -s /bin/zsh
      when: "'zsh' in tools_to_install"
      args:
        creates: /bin/zsh

    - name: Install Oh My Zsh
      shell: |
        export RUNZSH=no
        sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"
      when: "'zsh' in tools_to_install"

    - name: Install i3 window manager
      apt:
        name: i3
        state: present
      when: "'i3' in tools_to_install"

    - name: Install Rofi
      apt:
        name: rofi
        state: present
      when: "'rofi' in tools_to_install"

    - name: Install Polybar
      apt:
        name: polybar
        state: present
      when: "'polybar' in tools_to_install"

    - name: Install Kitty terminal
      apt:
        name: kitty
        state: present
      when: "'kitty' in tools_to_install"

    - name: Install Tmux
      apt:
        name: tmux
        state: present
      when: "'tmux' in tools_to_install"

    - name: Install Neovim
      block:
        - name: Download Neovim
          get_url:
            url: https://github.com/neovim/neovim/releases/latest/download/nvim-linux64.tar.gz
            dest: /tmp/nvim-linux64.tar.gz

        - name: Extract Neovim
          unarchive:
            src: /tmp/nvim-linux64.tar.gz
            dest: /opt
            remote_src: yes

        - name: Clean up Neovim archive
          file:
            path: /tmp/nvim-linux64.tar.gz
            state: absent
      when: "'neovim' in tools_to_install"

    - name: Install Timewarrior and Taskwarrior
      apt:
        name:
          - timewarrior
          - taskwarrior
        state: present
      when: "'timewarrior' in tools_to_install"

    - name: Symlink dotfiles
      ansible.builtin.file:
        src: "{{ item.src }}"
        dest: "{{ lookup('env', 'HOME') }}/{{ item.dest }}"
        state: link
        force: yes  # Overwrite existing files or directories
      loop:
        - { src: "{{ playbook_dir }}/dotfiles/bash/.bashrc", dest: ".bashrc" }
        - { src: "{{ playbook_dir }}/dotfiles/zsh/.zshrc", dest: ".zshrc" }
        - { src: "{{ playbook_dir }}/dotfiles/zsh/cyberpunk.zsh-theme", dest: ".oh-my-zsh/themes/cyberpunk.zsh-theme" }
        - { src: "{{ playbook_dir }}/dotfiles/i3/config", dest: ".config/i3/config" }
        - { src: "{{ playbook_dir }}/dotfiles/kitty/kitty.conf", dest: ".config/kitty/kitty.conf" }
        - { src: "{{ playbook_dir }}/dotfiles/polybar/config", dest: ".config/polybar/config" }
        - { src: "{{ playbook_dir }}/dotfiles/rofi/config.rasi", dest: ".config/rofi/config.rasi" }
        - { src: "{{ playbook_dir }}/dotfiles/tmux/tmux.conf", dest: ".config/tmux/tmux.conf" }
        - { src: "{{ playbook_dir }}/dotfiles/timewarrior/.taskrc", dest: ".taskrc" }
        - { src: "{{ playbook_dir }}/dotfiles/nvim", dest: ".config/nvim" }
      when: "'dotfiles' in tools_to_install"





